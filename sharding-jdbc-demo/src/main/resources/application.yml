### 配置了两个数据源，对应的数据库分别为13306/order_0和23306/order_1
### 上述两个数据库中各存储了 t_order_{seq} 逻辑表的16张分表 {0-15}
### 以用户ID为主键进行分库
### 以订单ID为主键进行分表

# SQL控制台打印
spring:
  shardingsphere:
    props:
      sql:
        show: true
    # 配置真实数据源
    datasource:
      names: ds0, ds1
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:13306/order_0?characterEncoding=utf-8
        username: root
        password: 123456
      ds1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:23306/order_1?characterEncoding=utf-8
        username: root
        password: 123456
    sharding:
      tables:
        t_order:
          # 配置 t_order 表规则: 分表形式为t_order_{0-15}，分别分布在ds0、ds1两个数据库节点中
          actualDataNodes: ds${0..1}.t_order_${0..15}
          # 配置 t_order 表分库策略: (inline: 基于行表达式的分片算法)
          databaseStrategy:
            inline:
              shardingColumn: user_id
              algorithmExpression: ds${user_id % 2}
          # 配置 t_order 表分表策略: (inline: 基于行表达式的分片算法)
          tableStrategy:
            inline:
              shardingColumn: order_id
              algorithmExpression: t_order_${order_id % 16}

# mybatis
mybatis:
  mapper-locations: classpath:mappers/*Mapper.xml
  type-aliases-package: com.boring.shardingjdbc.entity
# log
logging:
  level:
    com:
      boring:
        shardingjdbc: debug
server:
  port: 8080
